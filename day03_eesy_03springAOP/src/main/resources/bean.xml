<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的Ioc，把service对象配置进来 -->
    <bean id="accountService" class="com.jsp.service.impl.AccountServiceImpl"></bean>

    <!-- Spring基于xml的AOP配置步骤
        1，把通知Bean也交给spring来管理
        2，使用aop:config标签表明开始AOP的配置
        3，使用aop:aspect表明开始配置切面
            id属性：给切面提供一个唯一标识
            ref属性：指定通知类的bean的id
        4，aop:aspect标签的内部使用对应的标签来配置通知的类型
            我们现在的示例是让Logger方法在切入点方法之前执行，所以是前置通知
            aop:before：表示配置前置通知
                method属性：用于指定Logger类中那个方法是前置通知
                pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强
                切入点表达式的写法：
                    关键字：execution（表达式）
                    表达式：
                        访问修饰符  返回值 包名.包名.包名...类名.方法名(参数列表)
                    标准的表达式写法：
                        public void com.jsp.service.impl.AccountServiceImpl.saveAccount()
                    全通配写法：
                        * *..*.*(..)
                    实际开发中切入点表达式的通常写法：
                        切到业务层实现类下的所有方法：
                            * com.jsp.service.impl.*.*(..)
    -->
    <!-- 配置Logger类 -->
    <bean id="logger" class="com.jsp.utils.Logger"></bean>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知的类型，并且建立通知方法和切入点方法的关联 -->
            <aop:before method="printLog" pointcut="execution(* com.jsp.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>
</beans>